// This file is automatically generated.
using System;
using System.Text;
using System.Runtime.InteropServices;

namespace Steam4NET
{

	public enum EGCMsgResponse : int
	{
		k_EGCMsgResponseOK = 0,
		k_EGCMsgResponseDenied = 1,
		k_EGCMsgResponseServerError = 2,
		k_EGCMsgResponseTimeout = 3,
		k_EGCMsgResponseInvalid = 4,
		k_EGCMsgResponseNoMatch = 5,
		k_EGCMsgResponseUnknownError = 6,
		k_EGCMsgResponseNotLoggedOn = 7,
	};
	
	public enum EGCResults : int
	{
		k_EGCResultOK = 0,
		k_EGCResultNoMessage = 1,
		k_EGCResultBufferTooSmall = 2,
		k_EGCResultNotLoggedOn = 3,
		k_EGCResultInvalidMessage = 4,
	};
	
	public enum EGCMessages : int
	{
		k_EGCMsgGenericReply = 10,
		k_ESOMsg_Create = 21,
		k_ESOMsg_Update = 22,
		k_ESOMsg_Destroy = 23,
		k_ESOMsg_CacheSubscribed = 24,
		k_ESOMsg_CacheUnsubscribed = 25,
		k_EGCMsgAchievementAwarded = 51,
		k_EGCMsgConCommand = 52,
		k_EGCMsgStartPlaying = 53,
		k_EGCMsgStopPlaying = 54,
		k_EGCMsgStartGameserver = 55,
		k_EGCMsgStopGameserver = 56,
		k_EGCMsgWGRequest = 57,
		k_EGCMsgWGResponse = 58,
		k_EGCMsgGetUserGameStatsSchema = 59,
		k_EGCMsgGetUserGameStatsSchemaResponse = 60,
		k_EGCMsgGetUserStatsDEPRECATED = 61,
		k_EGCMsgGetUserStatsResponse = 62,
		k_EGCMsgAppInfoUpdated = 63,
		k_EGCMsgValidateSession = 64,
		k_EGCMsgValidateSessionResponse = 65,
		k_EGCMsgLookupAccountFromInput = 66,
		k_EGCMsgSendHTTPRequest = 67,
		k_EGCMsgSendHTTPRequestResponse = 68,
		k_EGCMsgPreTestSetup = 69,
		k_EGCMsgRecordSupportAction = 70,
		k_EGCMsgGetAccountDetails = 71,
		k_EGCMsgSendInterAppMessage = 72,
		k_EGCMsgReceiveInterAppMessage = 73,
		k_EGCMsgFindAccounts = 74,
		k_EGCMsgPostAlert = 75,
		k_EGCMsgGetLicenses = 76,
		k_EGCMsgGetUserStats = 77,
		k_EGCMsgWebAPIRegisterInterfaces = 101,
		k_EGCMsgWebAPIJobRequest = 102,
		k_EGCMsgWebAPIRegistrationRequested = 103,
		k_EMsgGCSetItemPosition = 1001,
		k_EMsgGCCraft = 1002,
		k_EMsgGCCraftResponse = 1003,
		k_EMsgGCDelete = 1004,
		k_EMsgGCVerifyCacheSubscription = 1005,
		k_EMsgGCNameItem = 1006,
		k_EMsgGCDecodeItem = 1007,
		k_EMsgGCDecodeItemResponse = 1008,
		k_EMsgGCPaintItem = 1009,
		k_EMsgGCPaintItemResponse = 1010,
		k_EMsgGCGoldenWrenchBroadcast = 1011,
		k_EMsgGCMOTDRequest = 1012,
		k_EMsgGCMOTDRequestResponse = 1013,
		k_EMsgGCAddItemToSocket = 1014,
		k_EMsgGCAddItemToSocketResponse = 1015,
		k_EMsgGCAddSocketToBaseItem = 1016,
		k_EMsgGCAddSocketToItem = 1017,
		k_EMsgGCAddSocketToItemResponse = 1018,
		k_EMsgGCNameBaseItem = 1019,
		k_EMsgGCNameBaseItemResponse = 1020,
		k_EMsgGCRemoveSocketItem = 1021,
		k_EMsgGCRemoveSocketItemResponse = 1022,
		k_EMsgGCCustomizeItemTexture = 1023,
		k_EMsgGCCustomizeItemTextureResponse = 1024,
		k_EMsgGCUseItemRequest = 1025,
		k_EMsgGCUseItemResponse = 1026,
		k_EMsgGCGiftedItems = 1027,
		k_EMsgGCSpawnItem = 1028,
		k_EMsgGCRespawnPostLoadoutChange = 1029,
		k_EMsgGCRemoveItemName = 1030,
		k_EMsgGCRemoveItemPaint = 1031,
		k_EMsgGCGiftWrapItem = 1032,
		k_EMsgGCGiftWrapItemResponse = 1033,
		k_EMsgGCDeliverGift = 1034,
		k_EMsgGCDeliverGiftResponseGiver = 1035,
		k_EMsgGCDeliverGiftResponseReceiver = 1036,
		k_EMsgGCUnwrapGiftRequest = 1037,
		k_EMsgGCUnwrapGiftResponse = 1038,
		k_EMsgGCTrading_InitiateTradeRequest = 1501,
		k_EMsgGCTrading_InitiateTradeResponse = 1502,
		k_EMsgGCTrading_StartSession = 1503,
		k_EMsgGCTrading_SetItem = 1504,
		k_EMsgGCTrading_RemoveItem = 1505,
		k_EMsgGCTrading_UpdateTradeInfo = 1506,
		k_EMsgGCTrading_SetReadiness = 1507,
		k_EMsgGCTrading_ReadinessResponse = 1508,
		k_EMsgGCTrading_SessionClosed = 1509,
		k_EMsgGCTrading_CancelSession = 1510,
		k_EMsgGCTrading_TradeChatMsg = 1511,
		k_EMsgGCTrading_ConfirmOffer = 1512,
		k_EMsgGCTrading_TradeTypingChatMsg = 1513,
		k_EMsgGCServerBrowser_FavoriteServer = 1601,
		k_EMsgGCServerBrowser_BlacklistServer = 1602,
		k_EMsgGCDev_NewItemRequest = 2001,
		k_EMsgGCDev_NewItemRequestResponse = 2002,
		k_EMsgGCSystemMessage = 3001,
		k_EMsgGCReportWarKill = 5001,
		k_EMsgGCCoaching_AddToCoaches = 5002,
		k_EMsgGCCoaching_AddToCoachesResponse = 5003,
		k_EMsgGCCoaching_RemoveFromCoaches = 5004,
		k_EMsgGCCoaching_RemoveFromCoachesResponse = 5005,
		k_EMsgGCCoaching_FindCoach = 5006,
		k_EMsgGCCoaching_FindCoachResponse = 5007,
		k_EMsgGCCoaching_AskCoach = 5008,
		k_EMsgGCCoaching_AskCoachResponse = 5009,
		k_EMsgGCCoaching_CoachJoinGame = 5010,
		k_EMsgGCCoaching_CoachJoining = 5011,
		k_EMsgGCCoaching_CoachJoined = 5012,
		k_EMsgGCCoaching_LikeCurrentCoach = 5013,
		k_EMsgGCLookupAccount = 5014,
		k_EMsgGCLookupAccountResponse = 5015,
		k_EMsgGCLookupAccountName = 5016,
		k_EMsgGCLookupAccountNameResponse = 5017,
		k_EMsgGC_RevolvingLootList = 5400,
		k_EMsgGC_Duel_Request = 5500,
		k_EMsgGC_Duel_Response = 5501,
		k_EMsgGC_Duel_Results = 5502,
		k_EMsgGC_Duel_Status = 5503,
		k_EMsgGC_Halloween_ReservedItem = 5600,
		k_EMsgGC_Halloween_GrantItem = 5601,
		k_EMsgGC_Halloween_GrantItemResponse = 5604,
		k_EMsgGC_Halloween_Cheat_QueryResponse = 5605,
		k_EMsgGC_Halloween_ItemClaimed = 5606,
		k_EMsgGC_GameServer_LevelInfo = 5700,
		k_EMsgGC_GameServer_AuthChallenge = 5701,
		k_EMsgGC_GameServer_AuthChallengeResponse = 5702,
		k_EMsgGC_MM_RequestMatch = 5800,
		k_EMsgGC_MM_RequestMatchResponse = 5801,
		k_EMsgGC_MM_ReserveSpot = 5802,
		k_EMsgGC_MM_LoadMap = 5803,
		k_EMsgGC_PickupItemEligibility_Query = 6000,
		k_EMsgGCDev_GrantWarKill = 6001,
		k_EMsgGCTFGetUserData = 7000,
		k_EMsgGCTFGetUserDataResponse = 7001,
		k_EMsgGCTFPurchaseInit = 7002,
		k_EMsgGCTFPurchaseInitResponse = 7003,
		k_EMsgGCTFPurchaseFinalize = 7004,
		k_EMsgGCTFPurchaseFinalizeResponse = 7005,
		k_EMsgGCTFPurchaseCancel = 7006,
		k_EMsgGCTFPurchaseCancelResponse = 7007,
		k_EMsgGCTFPurchaseQueryTxn = 7008,
		k_EMsgGCTFPurchaseQueryTxnResponse = 7009,
	};
	
	public enum ETFInitTradeResult : int
	{
		k_ETFInitTradeResultOk = 0,
		k_ETFInitTradeResultDeclined = 1,
		k_ETFInitTradeResultVACBanned = 2,
		k_ETFInitTradeResultOtherVACBanned = 3,
		k_ETFInitTradeResultBusy = 4,
		k_ETFInitTradeResultDisabled = 5,
		k_ETFInitTradeResultNoLoggedIn = 6,
		k_ETFInitTradeResultCanceled = 7,
		k_ETFInitTradeResultTooSoon = 8,
	};
	
	public enum ETFTradeResult : int
	{
		k_ETFTradeResultOk = 0,
		k_ETFTradeResultCanceled = 1,
		k_ETFTradeResultStaleInventory = 2,
		k_ETFTradeResultUntradeable = 3,
		k_ETFTradeResultNoItems = 4,
		k_ETFTradeResultDisabled = 5,
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct GCMessageAvailable_t
	{
		UInt32 m_nMessageSize;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct GCMsgHeader_t
	{
		UInt16 headerVersion;
		UInt64 targetJobID;
		UInt64 sourceJobID;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct SOMsgCacheSubscribed_t
	{
		GCMsgHeader_t header;
		UInt64 steamid;
		UInt32 numberOfTypes;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct SOMsgCacheSubscribed_Items_t
	{
		UInt16 idOfType;
		UInt16 itemcount;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct SOMsgCacheSubscribed_Item_t
	{
		UInt64 itemid;
		UInt32 accountid;
		UInt16 itemdefindex;
		Byte itemlevel;
		Byte itemquality;
		UInt32 position;
		UInt32 quantity;
		UInt16 namelength;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct SOMsgCacheSubscribed_Item_Attrib_t
	{
		UInt16 attribindex;
		float value;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct SOMsgCacheUnsubscribed_t
	{
		GCMsgHeader_t header;
		UInt64 steamid;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct SOMsgCreate_t
	{
		GCMsgHeader_t header;
		UInt64 steamid;
		UInt32 unknown;
		SOMsgCacheSubscribed_Item_t item;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct SOMsgUpdate_t
	{
		GCMsgHeader_t header;
		UInt64 steamid;
		UInt32 unk1;
		UInt64 itemID;
		UInt16 unk2;
		UInt32 position;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct SOMsgDeleted_t
	{
		GCMsgHeader_t header;
		UInt64 steamid;
		UInt32 unk1;
		UInt64 itemid;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct GCSetItemPosition_t
	{
		GCMsgHeader_t header;
		UInt64 itemID;
		UInt32 position;
		UInt32 unk1;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct GCCraft_t
	{
		GCMsgHeader_t header;
		UInt16 blueprint;
		UInt16 itemcount;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct GCCraftResponse_t
	{
		GCMsgHeader_t header;
		UInt16 blueprint;
		UInt64 unk1;
		UInt64 itemid;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct GCDelete_t
	{
		GCMsgHeader_t header;
		UInt64 itemID;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct GCVerifyCacheSubscription_t
	{
		GCMsgHeader_t header;
		UInt64 steamid;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct GCGoldenWrenchBroadcast_t
	{
		GCMsgHeader_t header;
		UInt16 WrenchNumber;
		UInt16 State;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct GCMOTDRequest_t
	{
		GCMsgHeader_t header;
		UInt32 timestamp;
		UInt32 unk1;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct GCMOTDRequestResponse_t
	{
		GCMsgHeader_t header;
		UInt16 NumberOfNews;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct GC_GameServer_AuthChallenge_t
	{
		GCMsgHeader_t header;
		Byte unknown;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct GC_GameServer_AuthChallengeResponse_t
	{
		GCMsgHeader_t header;
		UInt32 accountID;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct GC_GameServer_LevelInfo_t
	{
		GCMsgHeader_t header;
		Byte unknown;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct GCTrading_InitiateTradeRequest_t
	{
		GCMsgHeader_t header;
		UInt32 challenge;
		UInt64 steamID;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct GCTrading_InitiateTradeResponse_t
	{
		GCMsgHeader_t header;
		UInt32 result;
		UInt32 challenge;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct GCTrading_TradeChatMsg_t
	{
		GCMsgHeader_t header;
		Byte unknown;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct GCTrading_TradeTypingChatMsg_t
	{
		GCMsgHeader_t header;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct GCTrading_StartSession_t
	{
		GCMsgHeader_t header;
		UInt64 steamID1;
		UInt64 steamID2;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct GCTrading_SetItem_t
	{
		GCMsgHeader_t header;
		Byte showcase;
		UInt64 itemID;
		Byte slot;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct GCTrading_RemoveItem_t
	{
		GCMsgHeader_t header;
		UInt64 itemID;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct GCTrading_UpdateTradeInfo_t
	{
		GCMsgHeader_t header;
		UInt32 version;
		Byte plyr1_numItems;
		Byte plyr2_numItems;
		Byte plyr1_numItems_showcase;
		Byte plyr2_numItems_showcase;
		UInt64 plyr1_showcase;
		UInt64 plyr1_slot0;
		UInt64 plyr1_slot1;
		UInt64 plyr1_slot2;
		UInt64 plyr1_slot3;
		UInt64 plyr1_slot4;
		UInt64 plyr1_slot5;
		UInt64 plyr1_slot6;
		UInt64 plyr1_slot7;
		UInt64 plyr2_showcase;
		UInt64 plyr2_slot0;
		UInt64 plyr2_slot1;
		UInt64 plyr2_slot2;
		UInt64 plyr2_slot3;
		UInt64 plyr2_slot4;
		UInt64 plyr2_slot5;
		UInt64 plyr2_slot6;
		UInt64 plyr2_slot7;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct GCTrading_ReadinessResponse_t
	{
		GCMsgHeader_t header;
		UInt32 version;
		Byte player1ready;
		Byte player2ready;
		Byte player1confirmed;
		Byte player2confirmed;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct GCTrading_SetReadiness_t
	{
		GCMsgHeader_t header;
		UInt32 version;
		Byte response;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct GCTrading_ConfirmOffer_t
	{
		GCMsgHeader_t header;
		UInt32 version;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct GCTrading_SessionClosed_t
	{
		GCMsgHeader_t header;
		UInt32 result;
	};
	
	[StructLayout(LayoutKind.Sequential,Pack=8)]
	public struct GCRespawnPostLoadoutChange_t
	{
		GCMsgHeader_t header;
		UInt64 steamID;
	};
	
}
